{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n//[High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n//Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas'\n  }]);\n  const [newName, setNewName] = useState('');\n\n  const handleChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const addName = event => {\n    const newPerson = {\n      name: newName\n    };\n    setPersons(persons.concat(newPerson));\n    setNewName('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addName,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" newName variable: \", newName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", persons[0], \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bygYHvfrJMFWEb1nLk63ZhqUirc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","App","persons","setPersons","name","newName","setNewName","handleChange","event","target","value","addName","newPerson","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BH,QAAQ,CAAC,CACvC;AAAEI,IAAAA,IAAI,EAAE;AAAR,GADuC,CAAD,CAAxC;AAGA,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;;AACA,QAAMO,YAAY,GAAIC,KAAD,IAAW;AAC9BF,IAAAA,UAAU,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAFD;;AAIA,QAAMC,OAAO,GAAIH,KAAD,IAAW;AACzB,UAAMI,SAAS,GAAG;AAChBR,MAAAA,IAAI,EAAEC;AADU,KAAlB;AAGAF,IAAAA,UAAU,CAACD,OAAO,CAACW,MAAR,CAAeD,SAAf,CAAD,CAAV;AACAN,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAND;;AAQA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEK,OAAhB;AAAA,8BACE;AAAA,0CACQ;AAAO,UAAA,KAAK,EAAEN,OAAd;AAAuB,UAAA,QAAQ,EAAEE;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADR;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,+BACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAA,0CAAyBF,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAA,sBAAOH,OAAO,CAAC,CAAD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAjCD;;GAAMD,G;;KAAAA,G;AAmCN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\n\n//Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n\n//[High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n\n//Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7.\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n    { name: 'Arto Hellas' }\n  ])\n  const [ newName, setNewName ] = useState('')\n  const handleChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const addName = (event) => {\n    const newPerson = {\n      name: newName\n    }\n    setPersons(persons.concat(newPerson))\n    setNewName('')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addName}>\n        <div>\n          name: <input value={newName} onChange={handleChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n        <div> newName variable: {newName} </div>\n      </form>\n      <h2>Numbers</h2>\n      <div> {persons[0]} </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}