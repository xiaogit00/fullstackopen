{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n//Ex2.6 [High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n//Ex2.6 Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7. Show the names under numbers. Persons are saved as an object. I'll need to use map to\n//   create multiple elements.\n//*********************************************************************************\n//Ex 2.7: Preventing user from being able to add names:\n// [High level logic]: I'll compare newName with items in persons object and if it exists,\n// return an alert\n//Ex 2.7 Pseudo-Code:\n// 1. I'll need to add this validation into addNames event handler\n// 2. I feel like includes method might be right. Let's see how I can implement this.\n// 3. persons is an array of objects. Might try: persons.includes(newPerson)\n// 4. includes didn't work, for some reason. I used Some instead.\n//*********************************************************************************\n//Ex 2.8 [High level logics] - I'll need to add a number, and then the number needs to\n// display the portion below.\n//\n// Ex2.8 Pseudo-code\n// 1.I'll need to add a number field within persons object [DONE]\n// 2. A newNumber state field to capture input [DONE]\n// 3. Adjust the add event handler to addNumber too\n// 4. Add a new input field in JSX to capture number\n// 5. Add new numberChange event handler [DONE]\n//*********************************************************************************\n// Ex 2.9: Higher Level Logics\n// I'll need to implement a search bar. The main logic of the search bar is to create a new state.\n//  And then, create a function which only shows the names that match the search\n// Ex 2.9 Pseudo-Code\n// 1. Add an input bar [Done]\n// 2. Create a new state field: search [Done]\n// 3. Write the variable function searchFilter that displays only fields found, make sure it's\n//  not case sensitive\n// 4. Attach the function to an event handler\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // STATE FIELDS\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: '040-123456'\n  }, {\n    name: 'Ada Lovelace',\n    number: '39-44-5323523'\n  }, {\n    name: 'Dan Abramov',\n    number: '12-43-234345'\n  }, {\n    name: 'Mary Poppendieck',\n    number: '39-23-6423122'\n  }]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [search, setNewSearch] = useState(''); // EVENT HANDLERS\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchChange = event => {\n    setNewSearch(event.target.value);\n  };\n\n  const add = event => {\n    event.preventDefault(); // console.log('addName triggered')\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }; //\n\n    const personExists = obj => obj.name === newName; //returns True if already exist\n\n\n    if (persons.some(personExists)) {\n      alert(`${newName} is already added to phonebook`);\n    } else {\n      setPersons(persons.concat(newPerson));\n      setNewName('');\n      setNewNumber('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Filter shown with:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: search,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: add,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newNumber,\n          onChange: handleNumberChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" newName variable: \", newName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), persons.map(x => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", x.name, \" \", x.number]\n    }, x.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"FYLdzPgBwlMmvGGfHZqh1A/4HSg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","App","persons","setPersons","name","number","newName","setNewName","newNumber","setNewNumber","search","setNewSearch","handleNameChange","event","target","value","handleNumberChange","handleSearchChange","add","preventDefault","newPerson","personExists","obj","some","alert","concat","map","x"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,CACrC;AAAEI,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,MAAM,EAAE;AAA/B,GADqC,EAErC;AAAED,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,MAAM,EAAE;AAAhC,GAFqC,EAGrC;AAAED,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,MAAM,EAAE;AAA/B,GAHqC,EAIrC;AAAED,IAAAA,IAAI,EAAE,kBAAR;AAA4BC,IAAAA,MAAM,EAAE;AAApC,GAJqC,CAAD,CAAtC;AAMA,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAEQ,SAAF,EAAaC,YAAb,IAA6BT,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACU,MAAD,EAASC,YAAT,IAAyBX,QAAQ,CAAC,EAAD,CAAvC,CAVgB,CAYhB;;AACA,QAAMY,gBAAgB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,UAAU,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAIH,KAAD,IAAW;AACpCJ,IAAAA,YAAY,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACD,GAFD;;AAIA,QAAME,kBAAkB,GAAIJ,KAAD,IAAW;AACpCF,IAAAA,YAAY,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACD,GAFD;;AAIA,QAAMG,GAAG,GAAIL,KAAD,IAAW;AACrBA,IAAAA,KAAK,CAACM,cAAN,GADqB,CAErB;;AACA,UAAMC,SAAS,GAAG;AAChBhB,MAAAA,IAAI,EAAEE,OADU;AAEhBD,MAAAA,MAAM,EAAEG;AAFQ,KAAlB,CAHqB,CAOzB;;AACI,UAAMa,YAAY,GAAIC,GAAD,IAASA,GAAG,CAAClB,IAAJ,KAAaE,OAA3C,CARqB,CAQ8B;;;AAEnD,QAAIJ,OAAO,CAACqB,IAAR,CAAaF,YAAb,CAAJ,EAAgC;AAC9BG,MAAAA,KAAK,CAAE,GAAElB,OAAQ,gCAAZ,CAAL;AACD,KAFD,MAGK;AACHH,MAAAA,UAAU,CAACD,OAAO,CAACuB,MAAR,CAAeL,SAAf,CAAD,CAAV;AACAb,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AAEF,GAnBD;;AAqBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,oDACE;AAAO,QAAA,KAAK,EAAEC,MAAd;AAAsB,QAAA,QAAQ,EAAEO;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAM,MAAA,QAAQ,EAAEC,GAAhB;AAAA,8BACE;AAAA,0CACQ;AAAO,UAAA,KAAK,EAAEZ,OAAd;AAAuB,UAAA,QAAQ,EAAEM;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADR;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,4CACU;AAAO,UAAA,KAAK,EAAEJ,SAAd;AAAyB,UAAA,QAAQ,EAAEQ;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADV;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAA,+BACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAUE;AAAA,0CAAyBV,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,EAkBGJ,OAAO,CAACwB,GAAR,CAAYC,CAAC,iBAAI;AAAA,sBAAkBA,CAAC,CAACvB,IAApB,OAA2BuB,CAAC,CAACtB,MAA7B;AAAA,OAAQsB,CAAC,CAACvB,IAAV;AAAA;AAAA;AAAA;AAAA,YAAjB,CAlBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CApED;;GAAMH,G;;KAAAA,G;AAsEN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\n\n//Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n\n//Ex2.6 [High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n\n//Ex2.6 Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7. Show the names under numbers. Persons are saved as an object. I'll need to use map to\n//   create multiple elements.\n//*********************************************************************************\n//Ex 2.7: Preventing user from being able to add names:\n// [High level logic]: I'll compare newName with items in persons object and if it exists,\n// return an alert\n\n//Ex 2.7 Pseudo-Code:\n// 1. I'll need to add this validation into addNames event handler\n// 2. I feel like includes method might be right. Let's see how I can implement this.\n// 3. persons is an array of objects. Might try: persons.includes(newPerson)\n// 4. includes didn't work, for some reason. I used Some instead.\n\n//*********************************************************************************\n\n//Ex 2.8 [High level logics] - I'll need to add a number, and then the number needs to\n// display the portion below.\n//\n// Ex2.8 Pseudo-code\n// 1.I'll need to add a number field within persons object [DONE]\n// 2. A newNumber state field to capture input [DONE]\n// 3. Adjust the add event handler to addNumber too\n// 4. Add a new input field in JSX to capture number\n// 5. Add new numberChange event handler [DONE]\n\n//*********************************************************************************\n\n// Ex 2.9: Higher Level Logics\n// I'll need to implement a search bar. The main logic of the search bar is to create a new state.\n//  And then, create a function which only shows the names that match the search\n\n// Ex 2.9 Pseudo-Code\n// 1. Add an input bar [Done]\n// 2. Create a new state field: search [Done]\n// 3. Write the variable function searchFilter that displays only fields found, make sure it's\n//  not case sensitive\n// 4. Attach the function to an event handler\n\n\nconst App = () => {\n  // STATE FIELDS\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456' },\n    { name: 'Ada Lovelace', number: '39-44-5323523' },\n    { name: 'Dan Abramov', number: '12-43-234345' },\n    { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  ])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [search, setNewSearch] = useState('')\n\n  // EVENT HANDLERS\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setNewSearch(event.target.value)\n  }\n\n  const add = (event) => {\n    event.preventDefault()\n    // console.log('addName triggered')\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n//\n    const personExists = (obj) => obj.name === newName //returns True if already exist\n\n    if (persons.some(personExists)) {\n      alert(`${newName} is already added to phonebook`)\n    }\n    else {\n      setPersons(persons.concat(newPerson))\n      setNewName('')\n      setNewNumber('')\n    }\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <p>Filter shown with:\n        <input value={search} onChange={handleSearchChange}/>\n      </p>\n      <form onSubmit={add}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n        <div> newName variable: {newName} </div>\n      </form>\n      <h2>Numbers</h2>\n      {persons.map(x => <p key={x.name}> {x.name} {x.number}</p>)}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}