{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n//Ex2.6 [High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n//Ex2.6 Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7. Show the names under numbers. Persons are saved as an object. I'll need to use map to\n//   create multiple elements.\n//*********************************************************************************\n//Ex 2.7: Preventing user from being able to add names:\n// [High level logic]: I'll compare newName with items in persons object and if it exists,\n// return an alert\n//Ex 2.7 Pseudo-Code:\n// 1. I'll need to add this validation into addNames event handler\n// 2. I feel like includes method might be right. Let's see how I can implement this.\n// 3. persons is an array of objects. Might try: persons.includes(newPerson)\n// 4. includes didn't work, for some reason. I used Some instead.\n//*********************************************************************************\n//Ex 2. [High level logics] - I'll need to add a number, and then the number needs to\n// display the portion below.\n//\n// Ex2.8 Pseudo-code\n// 1.I'll need to add a number field within persons object [DONE]\n// 2. A newNumber state field to capture input [DONE]\n// 3. Adjust the add event handler to addNumber too\n// 4. Add a new input field in JSX to capture number\n// 5. Add new numberChange event handler [DONE]\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: 39 - 33 - 13232\n  }]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const add = event => {\n    event.preventDefault(); // console.log('addName triggered')\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    };\n\n    const personExists = obj => obj.name === newName; //returns True if already exist\n\n\n    console.log(persons.some(personExists));\n\n    if (persons.some(personExists)) {\n      alert(`${newName} is already added to phonebook`);\n    } else {\n      setPersons(persons.concat(newPerson));\n      setNewName('');\n      setNewNumber('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: add,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newNumber,\n          onChange: handleNumberChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" newName variable: \", newName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), persons.map(x => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", x.name, \" \", x.number]\n    }, x.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"xaJEbFO6HAAv8k4Lw6XlbhGvm54=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","App","persons","setPersons","name","number","newName","setNewName","newNumber","setNewNumber","handleNameChange","event","target","value","handleNumberChange","add","preventDefault","newPerson","personExists","obj","console","log","some","alert","concat","map","x"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n//Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n\n//Ex2.6 [High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n\n//Ex2.6 Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7. Show the names under numbers. Persons are saved as an object. I'll need to use map to\n//   create multiple elements.\n//*********************************************************************************\n//Ex 2.7: Preventing user from being able to add names:\n// [High level logic]: I'll compare newName with items in persons object and if it exists,\n// return an alert\n\n//Ex 2.7 Pseudo-Code:\n// 1. I'll need to add this validation into addNames event handler\n// 2. I feel like includes method might be right. Let's see how I can implement this.\n// 3. persons is an array of objects. Might try: persons.includes(newPerson)\n// 4. includes didn't work, for some reason. I used Some instead.\n\n//*********************************************************************************\n\n//Ex 2. [High level logics] - I'll need to add a number, and then the number needs to\n// display the portion below.\n//\n// Ex2.8 Pseudo-code\n// 1.I'll need to add a number field within persons object [DONE]\n// 2. A newNumber state field to capture input [DONE]\n// 3. Adjust the add event handler to addNumber too\n// 4. Add a new input field in JSX to capture number\n// 5. Add new numberChange event handler [DONE]\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n    { name: 'Arto Hellas',\n      number: 39-33-13232 }\n  ])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const add = (event) => {\n    event.preventDefault()\n    // console.log('addName triggered')\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    const personExists = (obj) => obj.name === newName //returns True if already exist\n\n\n    console.log(persons.some(personExists))\n    if (persons.some(personExists)) {\n      alert(`${newName} is already added to phonebook`)\n    }\n    else {\n      setPersons(persons.concat(newPerson))\n      setNewName('')\n      setNewNumber('')\n    }\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={add}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n        <div> newName variable: {newName} </div>\n      </form>\n      <h2>Numbers</h2>\n      {persons.map(x => <p key={x.name}> {x.name} {x.number}</p>)}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}