{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; //Ex 2.12: Filter and display countries from API\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countries = ({\n  selectedCountries\n}) => {\n  const displayedCountries = {\n    selectedCountries\n  } === null ? \"Type Something!\" : {\n    selectedCountries\n  }.length > 10 ? \"Too many matches, specify another filter\" : {\n    selectedCountries\n  }.length === 0 ? \"Sorry, none match\" : {\n    selectedCountries\n  };\n  console.log('displayed countries', displayedCountries);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c = Countries;\n\nconst App = () => {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [search, setSearch] = useState('');\n\n  const hook = () => {\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      console.log('promise fulfilled');\n      setCountries(response.data);\n    });\n  };\n\n  useEffect(hook, []);\n  console.log(countries); //Event Handler\n\n  const handleSearch = event => {\n    setSearch(event.target.value);\n  }; //Filter for Countries\n\n\n  const countryToShow = search === '' ? null : countries.filter(x => x.name.toLowerCase().includes(search)); //Displaying the right countries: if nothing in array, return string; else, show all\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"find countries\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: search,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Countries, {\n      selectedCountries: countryToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"KCgfdMLpS+ii8326jzdSDQBcnSQ=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Countries\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","useEffect","axios","Countries","selectedCountries","displayedCountries","length","console","log","App","countries","setCountries","search","setSearch","hook","get","then","response","data","handleSearch","event","target","value","countryToShow","filter","x","name","toLowerCase","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAIA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2B;AAC3C,QAAMC,kBAAkB,GAAG;AAACD,IAAAA;AAAD,QAAwB,IAAxB,GAA+B,iBAA/B,GACA;AAACA,IAAAA;AAAD,IAAoBE,MAApB,GAA6B,EAA7B,GAAkC,0CAAlC,GACA;AAACF,IAAAA;AAAD,IAAoBE,MAApB,KAA+B,CAA/B,GAAmC,mBAAnC,GACA;AAACF,IAAAA;AAAD,GAH3B;AAIkBG,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,kBAAnC;AAClB,sBACE,qCADF;AAID,CAVD;;KAAMF,S;;AAYN,MAAMM,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAEY,MAAF,EAAUC,SAAV,IAAuBb,QAAQ,CAAC,EAAD,CAArC;;AAIA,QAAMc,IAAI,GAAG,MAAM;AACjBZ,IAAAA,KAAK,CACFa,GADH,CACO,sCADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBV,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAG,MAAAA,YAAY,CAACM,QAAQ,CAACC,IAAV,CAAZ;AACD,KALH;AAMD,GAPD;;AASAjB,EAAAA,SAAS,CAACa,IAAD,EAAO,EAAP,CAAT;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ,EAjBgB,CAoBhB;;AACA,QAAMS,YAAY,GAAIC,KAAD,IAAW;AAC9BP,IAAAA,SAAS,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACD,GAFD,CArBgB,CAyBhB;;;AACA,QAAMC,aAAa,GAAGX,MAAM,KAAK,EAAX,GAClB,IADkB,GAElBF,SAAS,CAACc,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOC,WAAP,GAAqBC,QAArB,CAA8BhB,MAA9B,CAAtB,CAFJ,CA1BgB,CA6BhB;;AAIA,sBACE;AAAA,4BACA;AAAA,gDACE;AAAO,QAAA,KAAK,EAAEA,MAAd;AAAsB,QAAA,QAAQ,EAAEO;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAIA,QAAC,SAAD;AAAW,MAAA,iBAAiB,EAAEI;AAA9B;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA,kBADF;AASD,CA1CD;;GAAMd,G;;MAAAA,G;AA6CN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n//Ex 2.12: Filter and display countries from API\n\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n\n\n\nconst Countries = ({ selectedCountries }) => {\n  const displayedCountries = {selectedCountries} === null ? \"Type Something!\":\n                             {selectedCountries}.length > 10 ? \"Too many matches, specify another filter\":\n                             {selectedCountries}.length === 0 ? \"Sorry, none match\":\n                             {selectedCountries};\n                    console.log('displayed countries', displayedCountries)\n  return (\n    <>\n    </>\n  )\n}\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([])\n  const [ search, setSearch] = useState('')\n\n\n\n  const hook = () => {\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        console.log('promise fulfilled')\n        setCountries(response.data)\n      })\n  }\n\n  useEffect(hook, [])\n  console.log(countries)\n\n\n  //Event Handler\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n  //Filter for Countries\n  const countryToShow = search === ''\n    ? null\n    : countries.filter(x => x.name.toLowerCase().includes(search))\n  //Displaying the right countries: if nothing in array, return string; else, show all\n\n\n\n  return (\n    <>\n    <p>find countries\n      <input value={search} onChange={handleSearch}></input>\n    </p>\n    <Countries selectedCountries={countryToShow} />\n\n    </>\n  )\n}\n\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}