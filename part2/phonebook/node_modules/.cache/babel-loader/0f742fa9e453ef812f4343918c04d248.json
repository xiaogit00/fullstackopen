{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; //Ex 2.12: Filter and display countries from API\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n// Ex 2.13: I'll need to show those buttons, so that when I click on it, it could take me to that view that I need to show.\n// Right now, the view is triggered when displayedCountries ===1\n// I would need to trigger it upon click now, and I need additional buttons\n// Ex 2.13 Pseudo-code\n// 1.First, return the app to the state where it shows a list of countries [DONE]\n//    - i.e. But change the condition.\n// 2. Add buttons to the side of each country display\n// 3. Button, onClick, selects the row, and then displays the content\n//    How do I achieve that? I first need an event handler for sure\n//  eventHandler: sets countries to the one selected, ok liao the\n// rest is easy. Sets selected state variable to True as well.\n//Ex2.14:Pseudo-code\n// I'll need to first make a call to the API, and get the data and save in variable\n// Do I need to create a new state though? perhaps I should, so that page would\n// Refresh when it's done loading.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Countries = ({\n  countries,\n  search\n}) => {\n  _s();\n\n  // const displayedCountries =  ? \"Type Something!\":\n  //                            {selectedCountries}.length > 10 ? \"Too many matches, specify another filter\":\n  //                            {selectedCountries}.length === 0 ? \"Sorry, none match\":\n  //                            {selectedCountries};\n  //                   console.log('displayed countries', displayedCountries)\n  //I need to debug. I pass two state variables into Countries. Basically, Countries\n  // I'll need to clearly outline the logic for countries.\n  // 1. If search is empty, show string\n  // 2. if search is non-empty, then show whichever countries found by search\n  // 3. However: for countries.length > 10, if there are too many searches, then show string.\n  // 4. For countries.length === 0, show string\n  // 5. For countries.length === 1, return a special set of info\n  //Filter for Countries\n  // const countryToShow = {search} === ''\n  //   ? null\n  //   : countries.filter(x => x.name.toLowerCase().includes(search))\n  const countryToShow = countries.filter(x => x.name.toLowerCase().includes(search)); //Displaying the right countries: if nothing in array, return string; else, show all\n\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const displayedCountries = countryToShow.length > 10 ? \"Too many matches, specify another filter\" : countryToShow.length === 0 ? \"Sorry, none match\" : countryToShow.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [x.name, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setSelectedCountry([x]),\n      children: \"show\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 79\n    }, this)]\n  }, x.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 53\n  }, this));\n  console.log(selectedCountry); // const weatherUrl = \"http://api.weatherstack.com/current?access_key=\" + process.env.REACT_APP_API_KEY + \"&query=\" + selectedCountry[0].name\n  //\n  // const hook = () => {\n  //   axios\n  //     .get(weatherUrl)\n  //     .then(response => {\n  //       setWeather(response.data)\n  //     })\n  // }\n  // useEffect(hook)\n  // console.log(weather)\n\n  if (search === '') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Type Something!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    if (selectedCountry.length === 1) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: selectedCountry[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"capital: \", selectedCountry[0].capital, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"population: \", selectedCountry[0].population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"languages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), selectedCountry[0].languages.map(language => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: language.name\n        }, language.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 57\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedCountry[0].flag,\n          width: \"150\",\n          height: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Weather in \", selectedCountry[0].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Temperature: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 14\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedCountry[0].flag,\n          width: \"150\",\n          height: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Wind: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 14\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: displayedCountries\n      }, void 0, false);\n    }\n  }\n};\n\n_s(Countries, \"m3wfb9MZm3X+5QLWs2c2o303IbU=\");\n\n_c = Countries;\n\nconst App = () => {\n  _s2();\n\n  const [countries, setCountries] = useState([]);\n  const [search, setSearch] = useState('');\n\n  const hook = () => {\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      console.log('promise fulfilled');\n      setCountries(response.data);\n    });\n  };\n\n  useEffect(hook, []); //Event Handler\n\n  const handleSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"find countries\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: search,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Countries, {\n      countries: countries,\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(App, \"KCgfdMLpS+ii8326jzdSDQBcnSQ=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Countries\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","useEffect","axios","Countries","countries","search","countryToShow","filter","x","name","toLowerCase","includes","selectedCountry","setSelectedCountry","weather","setWeather","displayedCountries","length","map","console","log","capital","population","languages","language","flag","App","setCountries","setSearch","hook","get","then","response","data","handleSearch","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n//Ex 2.12: Filter and display countries from API\n\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n\n// Ex 2.13: I'll need to show those buttons, so that when I click on it, it could take me to that view that I need to show.\n// Right now, the view is triggered when displayedCountries ===1\n// I would need to trigger it upon click now, and I need additional buttons\n\n  // Ex 2.13 Pseudo-code\n  // 1.First, return the app to the state where it shows a list of countries [DONE]\n  //    - i.e. But change the condition.\n  // 2. Add buttons to the side of each country display\n  // 3. Button, onClick, selects the row, and then displays the content\n  //    How do I achieve that? I first need an event handler for sure\n  //  eventHandler: sets countries to the one selected, ok liao the\n  // rest is easy. Sets selected state variable to True as well.\n\n//Ex2.14:Pseudo-code\n// I'll need to first make a call to the API, and get the data and save in variable\n// Do I need to create a new state though? perhaps I should, so that page would\n// Refresh when it's done loading.\n\nconst Countries = ({ countries, search }) => {\n\n  // const displayedCountries =  ? \"Type Something!\":\n  //                            {selectedCountries}.length > 10 ? \"Too many matches, specify another filter\":\n  //                            {selectedCountries}.length === 0 ? \"Sorry, none match\":\n  //                            {selectedCountries};\n  //                   console.log('displayed countries', displayedCountries)\n  //I need to debug. I pass two state variables into Countries. Basically, Countries\n  // I'll need to clearly outline the logic for countries.\n  // 1. If search is empty, show string\n  // 2. if search is non-empty, then show whichever countries found by search\n  // 3. However: for countries.length > 10, if there are too many searches, then show string.\n  // 4. For countries.length === 0, show string\n  // 5. For countries.length === 1, return a special set of info\n\n  //Filter for Countries\n  // const countryToShow = {search} === ''\n  //   ? null\n  //   : countries.filter(x => x.name.toLowerCase().includes(search))\n  const countryToShow = countries.filter(x => x.name.toLowerCase().includes(search))\n  //Displaying the right countries: if nothing in array, return string; else, show all\n  const [selectedCountry, setSelectedCountry] = useState([])\n  const [weather, setWeather] = useState([])\n\n  const displayedCountries = countryToShow.length > 10 ? \"Too many matches, specify another filter\":\n                             countryToShow.length === 0 ? \"Sorry, none match\":\n                             countryToShow.map(x => <li key={x.name}>{x.name} <button onClick={() => setSelectedCountry([x])}>show</button></li>);\n\n  console.log(selectedCountry)\n  // const weatherUrl = \"http://api.weatherstack.com/current?access_key=\" + process.env.REACT_APP_API_KEY + \"&query=\" + selectedCountry[0].name\n  //\n  // const hook = () => {\n  //   axios\n  //     .get(weatherUrl)\n  //     .then(response => {\n  //       setWeather(response.data)\n  //     })\n  // }\n  // useEffect(hook)\n  // console.log(weather)\n\n  if (search === '') {\n    return (\n      <><p>Type Something!</p></>\n    )\n  } else {\n\n    if (selectedCountry.length === 1) {\n\n      return (\n        <>\n          <h1>{selectedCountry[0].name}</h1>\n          <br>\n          </br>\n          <p>capital: {selectedCountry[0].capital} </p>\n          <p>population: {selectedCountry[0].population}</p>\n          <h2>languages</h2>\n          {selectedCountry[0].languages.map(language => <li key={language.name}>{language.name}</li>)}\n          <br/>\n          <img src={selectedCountry[0].flag} width=\"150\" height=\"100\" />\n          <h2>Weather in {selectedCountry[0].name}</h2>\n          <p><b>Temperature: </b> </p>\n          <img src={selectedCountry[0].flag} width=\"150\" height=\"100\" />\n          <p><b>Wind: </b> </p>\n        </>\n      )\n    } else {\n      return (\n        <>\n          {displayedCountries}\n        </>\n      )\n    }\n  }\n\n\n\n}\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([])\n  const [ search, setSearch] = useState('')\n\n\n  const hook = () => {\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        console.log('promise fulfilled')\n        setCountries(response.data)\n      })\n  }\n\n  useEffect(hook, [])\n\n\n  //Event Handler\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n\n\n  return (\n    <>\n    <p>find countries\n      <input value={search} onChange={handleSearch}></input>\n    </p>\n    <Countries countries={countries} search={search} />\n\n    </>\n  )\n}\n\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}