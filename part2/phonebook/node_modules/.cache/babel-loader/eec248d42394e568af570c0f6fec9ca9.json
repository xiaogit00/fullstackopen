{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; //Ex 2.12: Filter and display countries from API\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n// Ex 2.13: I'll need to show those buttons, so that when I click on it, it could take me to that view that I need to show.\n// Right now, the view is triggered when displayedCountries ===1\n// I would need to trigger it upon click now, and I need additional buttons\n// Ex 2.13 Pseudo-code\n// 1.First, return the app to the state where it shows a list of countries [DONE]\n//    - i.e. But change the condition.\n// 2. Add buttons to the side of each country display\n// 3. Button, onClick, selects the row, and then displays the content\n//    How do I achieve that? I first need an event handler for sure\n//  eventHandler: sets countries to the one selected, ok liao the\n// rest is easy. Sets selected state variable to True as well.\n//Ex2.14:Pseudo-code\n// I'll need to first make a call to the API, and get the data and save in variable\n// Do I need to create a new state though? perhaps I should, so that page would\n// Refresh when it's done loading.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Weather = ({\n  country\n}) => {\n  _s();\n\n  const weatherUrl = \"http://api.weatherstack.com/current?access_key=\" + process.env.REACT_APP_API_KEY + \"&query=\" + country;\n  const [weather, setWeather] = useState([]);\n\n  const hook = () => {\n    axios.get(weatherUrl).then(response => {\n      setWeather(response.data);\n    });\n  };\n\n  useEffect(hook);\n  console.log(weather);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(Weather, \"Mos131Hxz3VSc+jVtInwzSzjUQ4=\");\n\n_c = Weather;\n\nconst Countries = ({\n  countries,\n  search\n}) => {\n  _s2();\n\n  // const displayedCountries =  ? \"Type Something!\":\n  //                            {selectedCountries}.length > 10 ? \"Too many matches, specify another filter\":\n  //                            {selectedCountries}.length === 0 ? \"Sorry, none match\":\n  //                            {selectedCountries};\n  //                   console.log('displayed countries', displayedCountries)\n  //I need to debug. I pass two state variables into Countries. Basically, Countries\n  // I'll need to clearly outline the logic for countries.\n  // 1. If search is empty, show string\n  // 2. if search is non-empty, then show whichever countries found by search\n  // 3. However: for countries.length > 10, if there are too many searches, then show string.\n  // 4. For countries.length === 0, show string\n  // 5. For countries.length === 1, return a special set of info\n  //Filter for Countries\n  // const countryToShow = {search} === ''\n  //   ? null\n  //   : countries.filter(x => x.name.toLowerCase().includes(search))\n  const countryToShow = countries.filter(x => x.name.toLowerCase().includes(search)); //Displaying the right countries: if nothing in array, return string; else, show all\n\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const displayedCountries = countryToShow.length > 10 ? \"Too many matches, specify another filter\" : countryToShow.length === 0 ? \"Sorry, none match\" : countryToShow.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [x.name, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setSelectedCountry([x]);\n      },\n      children: \"show\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 79\n    }, this)]\n  }, x.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 53\n  }, this));\n\n  if (search === '') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Type Something!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    if (selectedCountry.length === 1) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: selectedCountry[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"capital: \", selectedCountry[0].capital, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"population: \", selectedCountry[0].population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"languages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), selectedCountry[0].languages.map(language => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: language.name\n        }, language.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 57\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedCountry[0].flag,\n          width: \"150\",\n          height: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Weather in \", selectedCountry[0].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Weather, {\n          country: selectedCountry[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Temperature: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 14\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedCountry[0].flag,\n          width: \"150\",\n          height: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Wind: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 14\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: displayedCountries\n      }, void 0, false);\n    }\n  }\n};\n\n_s2(Countries, \"vsumXaDwpwlPxPUwUcer1m4Im8Y=\");\n\n_c2 = Countries;\n\nconst App = () => {\n  _s3();\n\n  const [countries, setCountries] = useState([]);\n  const [search, setSearch] = useState('');\n\n  const hook = () => {\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      console.log('promise fulfilled');\n      setCountries(response.data);\n    });\n  };\n\n  useEffect(hook, []); //Event Handler\n\n  const handleSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"find countries\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: search,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Countries, {\n      countries: countries,\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s3(App, \"KCgfdMLpS+ii8326jzdSDQBcnSQ=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Weather\");\n$RefreshReg$(_c2, \"Countries\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","useEffect","axios","Weather","country","weatherUrl","process","env","REACT_APP_API_KEY","weather","setWeather","hook","get","then","response","data","console","log","Countries","countries","search","countryToShow","filter","x","name","toLowerCase","includes","selectedCountry","setSelectedCountry","displayedCountries","length","map","capital","population","languages","language","flag","App","setCountries","setSearch","handleSearch","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n//Ex 2.12: Filter and display countries from API\n\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n\n// Ex 2.13: I'll need to show those buttons, so that when I click on it, it could take me to that view that I need to show.\n// Right now, the view is triggered when displayedCountries ===1\n// I would need to trigger it upon click now, and I need additional buttons\n\n  // Ex 2.13 Pseudo-code\n  // 1.First, return the app to the state where it shows a list of countries [DONE]\n  //    - i.e. But change the condition.\n  // 2. Add buttons to the side of each country display\n  // 3. Button, onClick, selects the row, and then displays the content\n  //    How do I achieve that? I first need an event handler for sure\n  //  eventHandler: sets countries to the one selected, ok liao the\n  // rest is easy. Sets selected state variable to True as well.\n\n//Ex2.14:Pseudo-code\n// I'll need to first make a call to the API, and get the data and save in variable\n// Do I need to create a new state though? perhaps I should, so that page would\n// Refresh when it's done loading.\nconst Weather = ({country}) => {\n  const weatherUrl = \"http://api.weatherstack.com/current?access_key=\" + process.env.REACT_APP_API_KEY + \"&query=\" + country\n  const [weather, setWeather] = useState([])\n  const hook = () => {\n    axios\n      .get(weatherUrl)\n      .then(response => {\n        setWeather(response.data)\n      })\n  }\n  useEffect(hook)\n  console.log(weather)\n  return (\n    <>\n    <p></p>\n    </>\n  )\n\n}\n\nconst Countries = ({ countries, search }) => {\n\n  // const displayedCountries =  ? \"Type Something!\":\n  //                            {selectedCountries}.length > 10 ? \"Too many matches, specify another filter\":\n  //                            {selectedCountries}.length === 0 ? \"Sorry, none match\":\n  //                            {selectedCountries};\n  //                   console.log('displayed countries', displayedCountries)\n  //I need to debug. I pass two state variables into Countries. Basically, Countries\n  // I'll need to clearly outline the logic for countries.\n  // 1. If search is empty, show string\n  // 2. if search is non-empty, then show whichever countries found by search\n  // 3. However: for countries.length > 10, if there are too many searches, then show string.\n  // 4. For countries.length === 0, show string\n  // 5. For countries.length === 1, return a special set of info\n\n  //Filter for Countries\n  // const countryToShow = {search} === ''\n  //   ? null\n  //   : countries.filter(x => x.name.toLowerCase().includes(search))\n  const countryToShow = countries.filter(x => x.name.toLowerCase().includes(search))\n  //Displaying the right countries: if nothing in array, return string; else, show all\n  const [selectedCountry, setSelectedCountry] = useState([])\n\n\n\n\n  const displayedCountries = countryToShow.length > 10 ? \"Too many matches, specify another filter\":\n                             countryToShow.length === 0 ? \"Sorry, none match\":\n                             countryToShow.map(x => <li key={x.name}>{x.name} <button onClick={() => {\n                               setSelectedCountry([x])\n                             }}>show</button></li>);\n\n\n\n  if (search === '') {\n    return (\n      <><p>Type Something!</p></>\n    )\n  } else {\n\n    if (selectedCountry.length === 1) {\n\n      return (\n        <>\n          <h1>{selectedCountry[0].name}</h1>\n          <br>\n          </br>\n          <p>capital: {selectedCountry[0].capital} </p>\n          <p>population: {selectedCountry[0].population}</p>\n          <h2>languages</h2>\n          {selectedCountry[0].languages.map(language => <li key={language.name}>{language.name}</li>)}\n          <br/>\n          <img src={selectedCountry[0].flag} width=\"150\" height=\"100\" />\n          <h2>Weather in {selectedCountry[0].name}</h2>\n          <Weather country={selectedCountry[0].name} />\n          <p><b>Temperature: </b> </p>\n          <img src={selectedCountry[0].flag} width=\"150\" height=\"100\" />\n          <p><b>Wind: </b> </p>\n        </>\n      )\n    } else {\n      return (\n        <>\n          {displayedCountries}\n        </>\n      )\n    }\n  }\n\n\n\n}\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([])\n  const [ search, setSearch] = useState('')\n\n\n  const hook = () => {\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        console.log('promise fulfilled')\n        setCountries(response.data)\n      })\n  }\n\n  useEffect(hook, [])\n\n\n  //Event Handler\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n\n\n  return (\n    <>\n    <p>find countries\n      <input value={search} onChange={handleSearch}></input>\n    </p>\n    <Countries countries={countries} search={search} />\n\n    </>\n  )\n}\n\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}