{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; //Ex 2.12: Filter and display countries from API\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Countries = ({\n  countries,\n  search\n}) => {\n  console.log({\n    countries\n  }); // const displayedCountries =  ? \"Type Something!\":\n  //                            {selectedCountries}.length > 10 ? \"Too many matches, specify another filter\":\n  //                            {selectedCountries}.length === 0 ? \"Sorry, none match\":\n  //                            {selectedCountries};\n  //                   console.log('displayed countries', displayedCountries)\n  //I need to debug. I pass two state variables into Countries. Basically, Countries\n  // I'll need to clearly outline the logic for countries.\n  // 1. If search is empty, show string\n  // 2. if search is non-empty, then show whichever countries found by search\n  // 3. However: for countries.length > 10, if there are too many searches, then show string.\n  // 4. For countries.length === 0, show string\n  // 5. For countries.length === 1, return a special set of info\n  //Filter for Countries\n  // const countryToShow = {search} === ''\n  //   ? null\n  //   : countries.filter(x => x.name.toLowerCase().includes(search))\n\n  const countryToShow = countries.filter(x => x.name.toLowerCase().includes(search)); //Displaying the right countries: if nothing in array, return string; else, show all\n\n  const displayedCountries = countryToShow.length > 10 ? \"Too many matches, specify another filter\" : countryToShow.length === 0 ? \"Sorry, none match\" : countryToShow.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: x.name\n  }, x.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 53\n  }, this));\n\n  if (search === '') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Type Something!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    const displayedCountries = countryToShow.length > 10 ? \"Too many matches, specify another filter\" : countryToShow.length === 0 ? \"Sorry, none match\" : countryToShow.length === 1 ? countryToShow : countryToShow.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: x.name\n    }, x.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 55\n    }, this));\n\n    if (displayedCountries.length === 1) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"You'vemade it\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: displayedCountries\n      }, void 0, false);\n    }\n  }\n};\n\n_c = Countries;\n\nconst App = () => {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [search, setSearch] = useState('');\n\n  const hook = () => {\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      console.log('promise fulfilled');\n      setCountries(response.data);\n    });\n  };\n\n  useEffect(hook, []);\n  console.log(countries); //Event Handler\n\n  const handleSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"find countries\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: search,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Countries, {\n      countries: countries,\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"KCgfdMLpS+ii8326jzdSDQBcnSQ=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Countries\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","useEffect","axios","Countries","countries","search","console","log","countryToShow","filter","x","name","toLowerCase","includes","displayedCountries","length","map","App","setCountries","setSearch","hook","get","then","response","data","handleSearch","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAIA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA2B;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,IAAAA;AAAD,GAAZ,EAD2C,CAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA,QAAMI,aAAa,GAAGJ,SAAS,CAACK,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOC,WAAP,GAAqBC,QAArB,CAA8BR,MAA9B,CAAtB,CAAtB,CAnB2C,CAoB3C;;AACA,QAAMS,kBAAkB,GAAIN,aAAa,CAACO,MAAd,GAAuB,EAAvB,GAA4B,0CAA5B,GACDP,aAAa,CAACO,MAAd,KAAyB,CAAzB,GAA6B,mBAA7B,GACAP,aAAa,CAACQ,GAAd,CAAkBN,CAAC,iBAAI;AAAA,cAAkBA,CAAC,CAACC;AAApB,KAASD,CAAC,CAACC,IAAX;AAAA;AAAA;AAAA;AAAA,UAAvB,CAF3B;;AAIA,MAAIN,MAAM,KAAK,EAAf,EAAmB;AACjB,wBACE;AAAA,6BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAF,qBADF;AAGD,GAJD,MAIO;AACL,UAAMS,kBAAkB,GAAGN,aAAa,CAACO,MAAd,GAAuB,EAAvB,GAA4B,0CAA5B,GACAP,aAAa,CAACO,MAAd,KAAyB,CAAzB,GAA6B,mBAA7B,GACAP,aAAa,CAACO,MAAd,KAAyB,CAAzB,GAA8BP,aAA9B,GACAA,aAAa,CAACQ,GAAd,CAAkBN,CAAC,iBAAI;AAAA,gBAAkBA,CAAC,CAACC;AAApB,OAASD,CAAC,CAACC,IAAX;AAAA;AAAA;AAAA;AAAA,YAAvB,CAH3B;;AAIA,QAAIG,kBAAkB,CAACC,MAAnB,KAA4B,CAAhC,EAAmC;AACjC,0BACE;AAAA,+BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,uBADF;AAKD,KAND,MAMO;AACL,0BACE;AAAA,kBACGD;AADH,uBADF;AAKD;AAEF;AAIF,CApDD;;KAAMX,S;;AAsDN,MAAMc,GAAG,GAAG,MAAM;AAAA;;AAEhB,QAAM,CAACb,SAAD,EAAYc,YAAZ,IAA4BlB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAEK,MAAF,EAAUc,SAAV,IAAuBnB,QAAQ,CAAC,EAAD,CAArC;;AAIA,QAAMoB,IAAI,GAAG,MAAM;AACjBlB,IAAAA,KAAK,CACFmB,GADH,CACO,sCADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBjB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAW,MAAAA,YAAY,CAACK,QAAQ,CAACC,IAAV,CAAZ;AACD,KALH;AAMD,GAPD;;AASAvB,EAAAA,SAAS,CAACmB,IAAD,EAAO,EAAP,CAAT;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EAjBgB,CAoBhB;;AACA,QAAMqB,YAAY,GAAIC,KAAD,IAAW;AAC9BP,IAAAA,SAAS,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACD,GAFD;;AAMA,sBACE;AAAA,4BACA;AAAA,gDACE;AAAO,QAAA,KAAK,EAAEvB,MAAd;AAAsB,QAAA,QAAQ,EAAEoB;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAIA,QAAC,SAAD;AAAW,MAAA,SAAS,EAAErB,SAAtB;AAAiC,MAAA,MAAM,EAAEC;AAAzC;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA,kBADF;AASD,CApCD;;GAAMY,G;;MAAAA,G;AAuCN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n//Ex 2.12: Filter and display countries from API\n\n//High level logics:\n// I first need to load the data into a countries variable\n// Then, let me try to display the country names\n// Then, my input would need to filter the data.\n//    -To create my filter,\n// Finally, I'll need to check for the condition when countries.length===1\n\n\n\nconst Countries = ({ countries, search }) => {\n  console.log({countries})\n  // const displayedCountries =  ? \"Type Something!\":\n  //                            {selectedCountries}.length > 10 ? \"Too many matches, specify another filter\":\n  //                            {selectedCountries}.length === 0 ? \"Sorry, none match\":\n  //                            {selectedCountries};\n  //                   console.log('displayed countries', displayedCountries)\n  //I need to debug. I pass two state variables into Countries. Basically, Countries\n  // I'll need to clearly outline the logic for countries.\n  // 1. If search is empty, show string\n  // 2. if search is non-empty, then show whichever countries found by search\n  // 3. However: for countries.length > 10, if there are too many searches, then show string.\n  // 4. For countries.length === 0, show string\n  // 5. For countries.length === 1, return a special set of info\n\n  //Filter for Countries\n  // const countryToShow = {search} === ''\n  //   ? null\n  //   : countries.filter(x => x.name.toLowerCase().includes(search))\n  const countryToShow = countries.filter(x => x.name.toLowerCase().includes(search))\n  //Displaying the right countries: if nothing in array, return string; else, show all\n  const displayedCountries =  countryToShow.length > 10 ? \"Too many matches, specify another filter\":\n                             countryToShow.length === 0 ? \"Sorry, none match\":\n                             countryToShow.map(x => <li key={x.name}>{x.name}</li>);\n\n  if (search === '') {\n    return (\n      <><p>Type Something!</p></>\n    )\n  } else {\n    const displayedCountries = countryToShow.length > 10 ? \"Too many matches, specify another filter\":\n                               countryToShow.length === 0 ? \"Sorry, none match\":\n                               countryToShow.length === 1 ?  countryToShow :\n                               countryToShow.map(x => <li key={x.name}>{x.name}</li>);\n    if (displayedCountries.length===1) {\n      return (\n        <>\n        <h1>You'vemade it</h1>\n        </>\n      )\n    } else {\n      return (\n        <>\n          {displayedCountries}\n        </>\n      )\n    }\n\n  }\n\n\n\n}\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([])\n  const [ search, setSearch] = useState('')\n\n\n\n  const hook = () => {\n    axios\n      .get('https://restcountries.eu/rest/v2/all')\n      .then(response => {\n        console.log('promise fulfilled')\n        setCountries(response.data)\n      })\n  }\n\n  useEffect(hook, [])\n  console.log(countries)\n\n\n  //Event Handler\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n\n\n  return (\n    <>\n    <p>find countries\n      <input value={search} onChange={handleSearch}></input>\n    </p>\n    <Countries countries={countries} search={search} />\n\n    </>\n  )\n}\n\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}