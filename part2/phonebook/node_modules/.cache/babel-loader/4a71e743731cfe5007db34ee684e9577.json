{"ast":null,"code":"var _jsxFileName = \"/Users/lei/fullstackopenSubmission/part2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n//Ex2.6 [High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n//Ex2.6 Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7. Show the names under numbers. Persons are saved as an object. I'll need to use map to\n//   create multiple elements.\n//*********************************************************************************\n//Ex 2.7: Preventing user from being able to add names:\n// [High level logic]: I'll compare newName with items in persons object and if it exists,\n// return an alert\n//Ex 2.7 Pseudo-Code:\n// 1. I'll need to add this validation into addNames event handler\n// 2. I feel like includes method might be right. Let's see how I can implement this.\n// 3. persons is an array of objects. Might try: persons.includes(newPerson)\n// 4. includes didn't work, for some reason. I used Some instead.\n//*********************************************************************************\n//Ex 2.8 [High level logics] - I'll need to add a number, and then the number needs to\n// display the portion below.\n//\n// Ex2.8 Pseudo-code\n// 1.I'll need to add a number field within persons object [DONE]\n// 2. A newNumber state field to capture input [DONE]\n// 3. Adjust the add event handler to addNumber too\n// 4. Add a new input field in JSX to capture number\n// 5. Add new numberChange event handler [DONE]\n//*********************************************************************************\n// Ex 2.9: Higher Level Logics\n// I'll need to implement a search bar. The main logic of the search bar is to create a new state.\n//  And then, create a function which only shows the names that match the search\n// Ex 2.9 Pseudo-Code\n// 1. Add an input bar [Done]\n// 2. Create a new state field: search [Done]\n// 3. Write the variable function searchFilter that displays only fields found, make sure it's\n//  not case sensitive[Done]\n// 4. Attach the function to an event handler\n//*********************************************************************************\n// Ex 2.10: Refactoring\n// Higher level logics: Keep app state and all event handlers in App component\n// 4 Components: Search, form, all rendering component, single person rendering\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  value,\n  handle\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Filter shown with:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: value,\n        onChange: handle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = Search;\n\nconst Form = props => {\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: props.submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: props.nameInput,\n        onChange: props.nameHandle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: props.numberInput,\n        onChange: props.numberHandle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Form;\n\nconst Persons = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.persons\n  }, void 0, false);\n};\n\n_c3 = Persons;\n\nconst App = () => {\n  _s();\n\n  // STATE FIELDS\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: '040-123456'\n  }, {\n    name: 'Ada Lovelace',\n    number: '39-44-5323523'\n  }, {\n    name: 'Dan Abramov',\n    number: '12-43-234345'\n  }, {\n    name: 'Mary Poppendieck',\n    number: '39-23-6423122'\n  }]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [search, setNewSearch] = useState(''); // EVENT HANDLERS\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchChange = event => {\n    setNewSearch(event.target.value);\n  };\n\n  const add = event => {\n    event.preventDefault(); // console.log('addName triggered')\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }; //\n\n    const personExists = obj => obj.name === newName; //returns True if already exist\n\n\n    if (persons.some(personExists)) {\n      alert(`${newName} is already added to phonebook`);\n    } else {\n      setPersons(persons.concat(newPerson));\n      setNewName('');\n      setNewNumber('');\n    }\n  };\n\n  const filteredPersons = search === '' ? persons : persons.filter(person => person.name.toLowerCase().includes(search));\n  const displayedPeople = filteredPersons.map(x => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\" \", x.name, \" \", x.number]\n  }, x.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 52\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      value: search,\n      handle: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), \"// \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Filter shown with: //   \", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: search,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 12\n      }, this), \"// \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      submitHandler: add,\n      nameInput: newName,\n      nameHandle: handleNameChange,\n      numberInput: newNumber,\n      numberHandle: handleNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), \"// \", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: add,\n      children: [\"//   \", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"//     name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 20\n        }, this), \"//   \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 12\n      }, this), \"//   \", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"//     number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newNumber,\n          onChange: handleNumberChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 22\n        }, this), \"//   \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 12\n      }, this), \"//   \", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"//     \", /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 14\n        }, this), \"//   \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 12\n      }, this), \"//   \", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" newName variable: \", newName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 12\n      }, this), \"// \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      persons: displayedPeople\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"FYLdzPgBwlMmvGGfHZqh1A/4HSg=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Search\");\n$RefreshReg$(_c2, \"Form\");\n$RefreshReg$(_c3, \"Persons\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/lei/fullstackopenSubmission/part2/src/App.js"],"names":["React","useState","Search","value","handle","Form","props","submitHandler","nameInput","nameHandle","numberInput","numberHandle","Persons","persons","App","setPersons","name","number","newName","setNewName","newNumber","setNewNumber","search","setNewSearch","handleNameChange","event","target","handleNumberChange","handleSearchChange","add","preventDefault","newPerson","personExists","obj","some","alert","concat","filteredPersons","filter","person","toLowerCase","includes","displayedPeople","map","x"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n//Okay. I've got a simple problem. I'll need to input the name, and render them into numbers.\n\n//Ex2.6 [High level logic] Which means, using what I know, I would need to:\n//1. save the name into a state\n//2. Write an eventHandler that is triggered onSubmit\n//3. Eventhandler calls setPersons, hence rendering person name on page\n\n//Ex2.6 Pseudo-code:\n//1. First, newName state is used to capture input.\n//2. The input field needs to have a value attribute, which I will set to newName.\n//3. I would need to capture keystrokes - this is done via an onChange event handler\n//4. The handleChange event handler will need to capture every keystroke (done), set the\n//   event.target.value (input in the box) to the setNewName\n//5. Add an event handler to Add button\n//6. Event handler does two things: 1)adds name to persons state; 2)resets field\n//   (1) is done via creating a new object, then concating it. setPersons(persons.concat)\n//   (2) is done setting newName to be ''\n//7. Show the names under numbers. Persons are saved as an object. I'll need to use map to\n//   create multiple elements.\n//*********************************************************************************\n//Ex 2.7: Preventing user from being able to add names:\n// [High level logic]: I'll compare newName with items in persons object and if it exists,\n// return an alert\n\n//Ex 2.7 Pseudo-Code:\n// 1. I'll need to add this validation into addNames event handler\n// 2. I feel like includes method might be right. Let's see how I can implement this.\n// 3. persons is an array of objects. Might try: persons.includes(newPerson)\n// 4. includes didn't work, for some reason. I used Some instead.\n\n//*********************************************************************************\n\n//Ex 2.8 [High level logics] - I'll need to add a number, and then the number needs to\n// display the portion below.\n//\n// Ex2.8 Pseudo-code\n// 1.I'll need to add a number field within persons object [DONE]\n// 2. A newNumber state field to capture input [DONE]\n// 3. Adjust the add event handler to addNumber too\n// 4. Add a new input field in JSX to capture number\n// 5. Add new numberChange event handler [DONE]\n\n//*********************************************************************************\n\n// Ex 2.9: Higher Level Logics\n// I'll need to implement a search bar. The main logic of the search bar is to create a new state.\n//  And then, create a function which only shows the names that match the search\n\n// Ex 2.9 Pseudo-Code\n// 1. Add an input bar [Done]\n// 2. Create a new state field: search [Done]\n// 3. Write the variable function searchFilter that displays only fields found, make sure it's\n//  not case sensitive[Done]\n// 4. Attach the function to an event handler\n\n//*********************************************************************************\n\n// Ex 2.10: Refactoring\n// Higher level logics: Keep app state and all event handlers in App component\n// 4 Components: Search, form, all rendering component, single person rendering\nconst Search = ({ value, handle }) => {\n  return (\n    <>\n      <p>Filter shown with:\n        <input value={value} onChange={handle}/>\n      </p>\n    </>\n  )\n}\n\nconst Form = (props) => {\n  return (\n    <form onSubmit={props.submitHandler}>\n      <div>\n        name: <input value={props.nameInput} onChange={props.nameHandle}/>\n      </div>\n      <div>\n        number: <input value={props.numberInput} onChange={props.numberHandle}/>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n  return (\n    <>\n    {props.persons}\n    </>\n  )\n}\n\nconst App = () => {\n  // STATE FIELDS\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456' },\n    { name: 'Ada Lovelace', number: '39-44-5323523' },\n    { name: 'Dan Abramov', number: '12-43-234345' },\n    { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  ])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [search, setNewSearch] = useState('')\n\n  // EVENT HANDLERS\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setNewSearch(event.target.value)\n  }\n\n  const add = (event) => {\n    event.preventDefault()\n    // console.log('addName triggered')\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n//\n    const personExists = (obj) => obj.name === newName //returns True if already exist\n\n    if (persons.some(personExists)) {\n      alert(`${newName} is already added to phonebook`)\n    }\n    else {\n      setPersons(persons.concat(newPerson))\n      setNewName('')\n      setNewNumber('')\n    }\n  }\n\n  const filteredPersons = search === ''\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(search))\n\n  const displayedPeople = filteredPersons.map(x => <p key={x.name}> {x.name} {x.number}</p>)\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Search value={search} handle={handleSearchChange}/>\n      // <p>Filter shown with:\n      //   <input value={search} onChange={handleSearchChange}/>\n      // </p>\n      <Form submitHandler={add}\n            nameInput={newName}\n            nameHandle={handleNameChange}\n            numberInput={newNumber}\n            numberHandle={handleNumberChange}\n      />\n      // <form onSubmit={add}>\n      //   <div>\n      //     name: <input value={newName} onChange={handleNameChange}/>\n      //   </div>\n      //   <div>\n      //     number: <input value={newNumber} onChange={handleNumberChange}/>\n      //   </div>\n      //   <div>\n      //     <button type=\"submit\">add</button>\n      //   </div>\n      //   <div> newName variable: {newName} </div>\n      // </form>\n\n      <h2>Numbers</h2>\n      <Persons persons={displayedPeople}/>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}